# Create a new directory and enter it
function mk() {
  mkdir -p "$@" && cd "$@"
}

function ensure-1p {
  # Login to 1Password. 
  # Assumes you have installed the OP CLI and performed the initial configuration
  # For more details see https://support.1password.com/command-line-getting-started/
  op list vaults > /dev/null 2>&1 || eval $(op signin auth0)
}

function envvars-1p {
  ensure-1p

  # My setup uses a 1Password type of 'Password' and stores all records within a 
  # single section. The label is the key, and the value is the value.
  ev=`op get item "Environment Variables"` 

  # Convert to base64 for multi-line secrets.
  # The schema for the 1Password type 'Password' uses t as the label, and v as the value.
  for row in $(echo ${ev} | jq -r -c '.details.sections[1].fields[] | @base64'); do
      _envvars() {
          echo ${row} | base64 --decode | jq -r ${1}
      } 
      echo "Setting environment variable $(_envvars '.t')"
      export $(echo "$(_envvars '.t')=$(_envvars '.v')")
  done

}

function chatty(){
    open /Applications/Chatty/Chatty.jar
}

function backup-vs(){
  code --list-extensions > ~/.dotfiles/vscode/extensions
}

function desktop-stream() {
  osascript ~/.dotfiles/apple-script/stream-desktop.scpt
}

function desktop-capture() {
  osascript ~/.dotfiles/apple-script/capture-desktop.scpt
}

function desktop-reset() {
  osascript ~/.dotfiles/apple-script/normal-desktop.scpt
}

function convert-webm() {
  file=`basename "$1"`
  ffmpeg -i $@ -c:v libvpx-vp9 -b:v 2M "${file%.*}.webm"
}